Linux 

In realtime we will be using linux OS only to setup infrastructure required to run our application
- Linux os is not only for administrators, 
	- even developers, testers, will also be working on linux os in real time to monitor our application and application servers.

History of Linux
- UNIX 
- linus, he suggested his changes to unix.
- and finally created his own os
- he used minux os, (Linus + minux = Linux)
- He released the OS source code for all. (open source operating system)

- As it is open source, many companies and people modify according to their needs and requirement and release them into market with different names
- ubuntu os, redhat, cent OS, Fedora, Kali linux, debian, open sesu, etc
- Linux setup
	- Use virtual box (with hypervisor)
	- Use cloud
	- Have parallel OS.

------------------------------------------------------------------------------------------

placements
- DSA
- OS
- DBMS
- CN 
- interviewbit.com (most asked questions of all topics)

- Git and Github
- Linux
- (ML, WebD, Cyber security, cloud, etc)
- Atleast 2 projects.


In linux, everything will be represented as file.
we have 3 types of files
- ordinary file(normal file)
- Directory file
- Link file


------------------------------------------------------------------------------------------

LINUX

1) whoami
	- to check username of current user.
2) pwd 
	-> present working directory
3) date
	-> display date
4) cal 
	-> display calender
5) touch
	-> creating new file
	-> $ touch ram.txt

6) ls
	-> list directories or files (to display flies in current workspace)
	-> $ ls

7) mkdir
	-> create new directory
	-> $ mkdir spirituality

8) ls -a
	-> it will display all files including hidden files.

9) code .
	-> It will open code editor

10) cat
	-> it stands for concatenate
	-> to create a file with data
	-> $ cat > radha.txt
		-> write something, and then
		-> "ctrl + D"
	-> $ cat radha.txt
	-> $ cat >> radha.txt
		-> to append to current text
	-> $ cat > radha.txt
		-> it will edit the file.
11) rm
	-> to remove the file
	-> $ rm filename.txt

12) rmdir 
	-> remove empty directory
	-> $ rmdir <directory-name>
	-> to remove non-empty directory
		-> $ rm -r <directory-name>

13) history
	-> It shows what all commands we have excecuted

14) clear
	-> It clears the terminal completely.

 "ctrl + l" -> It will align the present commands.

15) Options of 'ls' command
$ ls (will display files in alphabetical order)
$ ls -a (will show all the files)
$ ls -r (will display files in reverse of alphabetical order)
$ ls -l (It will display long listing of files)
$ ls -t (It will display file with last modified date and time)
$ ls -lr (combination of both the command)
Note: order doesn't matter in combinations of the commands.

in "ls -l"
	-> all files are starting with hyphen(-)
	-> and all directoriies starts with "d"
16) ls <directory-name>
	-> will display all the files inside the directory

17) cd 
	-> change directory
	-> $ cd <directory-name>
$ cd .. (to come out of directory)


18) to see file content with line number
$ cat -n filename.txt

19) to create multiple files with one command
$ touch f1.txt f2.txt

20) Copy data from one file to another
$ cat radha.txt > f1.txt

21) To reverse the content in the file(last line at top)
$ tac radha.txt

22) To reverse the content of each line. 
$ rev radha.txt

23) head
	-> head command will display data from top(default 10 lines)
	-> $ head <filename>
	-> $ head -n 13 <filename> 
		-> it will show data upto 13 lines

24) tail 
	->  same thing from bottom
	-> $ tail -n 13 radha.txt
		-> it will show last 13 lines.
	-> by default it will show, last 10 lines.

25) wc
	-> word count
	-> $ wc radha.txt
	-> 15  21 164 radha.txt
		-> 15 is number of lines
		-> 21 is total number of words
		-> 164 is total number of character

26) copy
$ cp m2.txt m1.txt (copy data in m2 in m1)
(we cannot copy from multiple commands into one)

we can do that using cat
$ cat m2.txt m3.txt >> m1.txt (it will append the data from m2 and m3 file into m1)


27) Rename
$ mv m3.txt m5.txt (it will rename m3.txt as m5.txt)

We can use this command for renaming and moving the files
$ mv f2.txt spirituality/


28) Comparing the files
$ cmp f1.txt f2.txt 
$ diff f1.txt f2.txt (it will display difference)
_______________________________________________________


29) GREP
-> Global regular expression print
-> It will process test line by line and print any line which matches given pattern

$ grep '<word>' <filename>
	- it will search for the line which have "word" in it
$ grep 'rama' ram.txt

Note: GREP is case-sensitive command
	-> 

$ grep -i 'rama' ram.txt
	-> for non case sensitive search

$ grep -R 'Tobago' bhakti/
	- It will search for that word under all the directories.


- to install grep.
$ sudo yum install grep
	- for amazon linux

Options in grep:
-i : ignores case sensitivity
-n: display the matched line and their line number
-l: display only file name that matches with the pattern
-h: display matched lines without file names
-R: display matched lines with file names
-c: This prints only the count of files that matches the given pattern

___________________________________________________________

30) Working with text editors in Linux

= The default editor that comes with unix is called vi.
= vi (Visual editor)
= Using vi editor, we can edit an existing file or create a new file from scratch. We can also use this editor to just read a text file.

= modes of operations in vi editor
1) Command mode
2) Insert mode
3) Escape mode

1) Command mode
= when we enter vi, then by default it is in command mode
= This mode allow us to move through a file and to delete copy or paste a piece of text
= to enter into command mode, from any other mode, it requires pressing the [ESC] key. 

2) Insert mode
- This mode enables you to insert text into the file
- All things you type here are considered as input
- To enter into insert mode from command mode, type "i".
- To come out of insert mode, type 'ESC'

3) Escape mode
- Line mode is invoked by typing a colon[:] in command mode
- The cursor will jump to the last line of the screen and vi will wait for a command
- Thsi mode eenables you to perform tasks such as saving files, executing commands.


To enter into vi mode:
$ vi <filename>
	= It will create new file if it doesn't already exists othewise opens existing file.
$ vi -R <filename>
	= Opens an existing file in readonly mode
$ view <filenames>
	- this also opens in only read only mode



esc +    :q!
	- Quit file without saving changes
esc + 	 :wq
	- write and quit (it saves the context of the file)

Usecase:
1) We will use vi editor to insert data at particular place
2) to edit shell script files.


---------------------------------------------------------------
31) SED command
- searching
- find
- replace
- insertion
- deletion

'krsna' => 'Krishna'

$ sed 's/krsna/Krishna/' <filename>


$ sed 's/krsna/Krishna/3' <filename>
	- this is to replace the 3rd occurance

$ sed 's/krsna/Krishna/g' <filename>
	- replace all the occurances
	- g stands for global

$ sed '5d' <filename>
	- It will delete the fifth line

$ sed '$d' <filename>
	- It will delete the last line


To make changes permanantly we will use '-i' option
$ sed -i 's/krsna/Krishna/' <filename>

______________________________________________________________
32) File Permissions in linux

4 developers

J and A : senior dev
S and An : Jr. dev

To same linux
- config.log
	- seniors
		- edit, view, delete.
	- junior
		- view.

-------------------------------------------------------------
 working with file permissions in linux os.
$ ls -l
drwxr-xr-x 1 gajan 197609    0 Apr 24 11:13 bhakti/
-rw-r--r-- 1 gajan 197609   21 Apr 23 11:30 data.log

d: represents, it is a directory.
-: represents it as a file.

Therefore, type of file : the starting letter.

File permissions are divided into 3 segments:
a) user (u) (users permission on the file)
b) group (g) (group permission on the file)
c) others (o) (others permission on the file)


r - read
w - Write
x - execute
- : No permission.



filetype	user	group	others
d		rwx	r-x	rw-

= User can read, write and execute.
= group can read and execute. (group cannot write)
= others can read and write (others cannot execute)

-----------------------------------------------------------
33) chmod (change mode)
- used to changed the permissions of the file

u: user
g: group
o: others

r: read
w: write
x: execute


$ chmod g+w <filename>


34) Symbolic mode for changing file permissions
0,1,2,4

number	permission
0	No permission
1	Execute
2	Write
3	Execute + Write
4	Read
5	Read + execute
6	Write + read
7	do everything


$ chmod 777 radha.txt
	- It means all, user-group-others can do everything
$ chmod 765 radha.txt
	- user: everything (rwx)
	- group: read and write (rw-)
	- others: read and execute (r-x)

-----------------------------------------------------------
35) Working with users, group and others.

- In Linux, the sudo command stands for “SuperUser DO”. It allows specific commands to be executed with root privileges by non-root users without changing their identity or specifying the root password. 


= creating a user:
 	$ sudo adduser <username>

= switching between users
	$ su - <username>

Home
	- /ubuntu
	- /username

- $ id <username>
	- to see the informations of users.
	- it will give userid, groupid, groups,etc.

- $ sudo userdel <username>
	- to delete a user. but directory will still be there.

- $ sudo deluser --remove-home <username>
	- for this login into ubunut and then delete it.
	- it will completely remove it.
---------------------------------------------------
usergroups
defn
-----------------------------------
create a group
You can see the groups you have by opening following files
- $ cat /etc/group

to create a group:
- $ sudo groupadd <groupname>

add user to the group
- $ sudo usermod -aG <groupname> <username>

verify the group using:
- $ id username

Note: wheneveery we create a user, along with that a group is also been created

delete user from a group
- $ sudo gpasswd -d <username> <groupname>

delete a group
- $ sudo groupdel <groupname>
_________________________________________________________

36) Working with 'Find' and 'Locate' commands

- The locate command will search for data in local db.
	- $locate <filename>
	- $ locate *.txt
		- it will locate all files with .txt extension


- Find command will search in external file system
	- $ find * -name radha.txt
		- to find the file name radha in system
	- $ find . -type f -perm 0777 -print
		- to find files which have all permissions
	- $ find * -type f -empty
		- to find all empty files
	- $ find * -type d -empty
		- to find all empty directory.

Note: find command will provide advance searching technique, using find command we can search using name and type also

Note: As fidd cmd is scanning entire file system, so it will take more time to give search results.

-------------------------------------------------------------

37) Man command
'man' command is like a help command.
It is used to understand command syntax and options
eg: $ man cat
	- it will give all details about cat command
	- then write wq to quit

-------------------------------------------------------------
38) To see the ip address, we use 'ifconfig'
- $ sudo apt install net-tools
- $ ifconfig 
	- it stands for interface configurations
	- often times used to modify the network configurations


-------------------------------------------------------------
39) 'ping' command used to check connectivity
- $ ping <ip>/dns

-------------------------------------------------------------
40) 'curl' commnad
- used to get response from the server 
$ curl <url>

-------------------------------------------------------------
41) 'wget' command is used to download resources from internet
$ wget <url>

-------------------------------------------------------------

42) echo
	- is used to print

43) Shell Scripting
User --- Shell --- Kernal --- Hardware components

Bash shell scripting
____________________

Bash
____

- bash is command language interpreter. It is widely avaiable on various OS and is a defualt command interpreter on Most GUI/LINUX systems. 
- 'Bourne-Again Shell'

Shell
_____
- Shell is responsible for reading the commands provided by user.
- shell will verify command systems ansd will give input for kernel (if command syntax is invalid)

- kernal will execute that command with hardwar


https://linuxjourney.com/
https://linuxsurvival.com/

Types of shells:
1) Bourne shell
2) Bash Shell
3) Korn
4) Cshell
5) Tshell
6) Zshell

Note: BASH (most commonly used)

$ echo $SHELL
	-> to check the shell available in our system

Scripting
_________

- Scripting allows for an automatic command execution that would otherwisse be executed interactively one by one.
- $ date
- $ whoami
- $ pwd
- $ ls -l


we can automate these commands by using scripting

Convert the file to executable using chmod, then execute command


steps
1) create file (<name>.sh extension)
2) vi and add commands
3) update permissions
4) run (./<name>.sh)



(sha-bang)
#!/bin/bash - add this line in every shell script

abc.sh

#!/bin/bash
echo "Hi, Hare Krishna"
read name
echo "good morning $name"
chmod u+x abc.sh


read name ========  char x;


-----------------------------------------------
Use cases
1) Update software packages
2) take server logs backup
3) Re-start server
4) deploy latest code into server
	- cd Utkrista-bharath-repo
	- git stash
	- git pull
	- git stash pop
	- <restart start server>  (nginx and gunicorn)
	- <check he status of server)
	- ping the ip address.


for scripting we will use : 
1) Variables - are used to store data
	- eg: x = 10 or y = 'abc'
2) Control statements
	- eg: if else statements
3) case statements
4) loops
5) functions

if else condition syntax
__________________________

read name
if [ $age -ge 18 ]
then
	echo "$name, can vote"
else
	echo "$name, can't vote"
fi


(use fi to end the if else condition)


&& => logical AND
-eq => equal to
-ne => not equal to
-lt => less than
-le => less than equal to
-gt => greater than
-ge => greater than and equal to


Command line arguments
______________________
The arguments which will be passed after script name at the time of execution are called command line arguments


adding 2 numbers
#!/bin/bash
a = 2
b = 3
c = $ (($a + $b))
echo $a + $b = $c



- sleep command
sleep 3s


- multiline comments
<< COMMENT
<text>
COMMENT

----------------------------------------------------------
case STATEMENTS
__________________
	
case EXPRESSION in
  Pattern_Case_1)
   STATEMENTS
   ;;
 Pattern_Case_1)
   STATEMENTS
   ;;
 Pattern_Case_N)
   STATEMENTS
   ;;
 *)
   STATEMENTS
   ;;
esac


#!/bin/sh

case 	"$fruit" in 
	"apple")
	echo "Healthy"
	;;
	"banana")
	echo "fatty"
	;;
	"Mango")
	echo "favorite"
	;;
	*)
	echo "hehe"
	;;
esac


----------------------------------------------------------
loops
-> for.sh
#!/bin/bash
for i in 1 2 3 4 5
do
  echo "Looping ... number $i"
done


-> For loop other syntax
for ((i=1;i<=10;i++))
do
	echo "$i"
done


-> while loop
while.sh
#!/bin/sh
INPUT_STRING=hello
while [ "$INPUT_STRING" != "bye" ]
do
  echo "Please type something in (bye to quit)"
  read INPUT_STRING
  if [ "$INPUT_STRING" = "bye" ]
  then
	echo "Get lost: $INPUT_STRING"
  else
	echo "You typed: $INPUT_STRING"
 fi
done

------------------------------------------------------------------


Functions

function func_name(){
	commands to be executed
}


read name
function welcome(){
	echo "hello"
	echo "$name"
}

__________________________________________________

44) Check the availability of disk space
$ df
$ df -h 
	- human readable



Sure, here's a list of some important networking commands that are commonly used in software jobs:

1. **ping**: Test the reachability of a host on an IP network and measure the round-trip time for packets sent to it.
   Example: `ping google.com`

2. **traceroute / tracert**: Discover the network path from your host to a destination host, showing all intermediate hops.
   Example: `traceroute google.com`

3. **netstat**: Display network connections, routing tables, interface statistics, masquerade connections, and multicast memberships.
   Example: `netstat -ano`

4. **nslookup / dig**: Query DNS servers to obtain domain name or IP address mapping information.
   Example: `nslookup google.com`

5. **ifconfig / ip**: Configure and display network interface parameters.
   Example: `ifconfig eth0`

6. **route**: View and manipulate the IP routing table.
   Example: `route -n`

7. **arp**: Display and modify the Address Resolution Protocol (ARP) cache.
   Example: `arp -a`

8. **ssh**: Securely connect to a remote host or manage a remote system over a network.
   Example: `ssh username@hostname`

9. **scp**: Securely copy files between hosts on a network.
   Example: `scp file.txt username@hostname:/path/to/destination`

10. **ftp / sftp**: Transfer files to and from a remote network host.
    Example (FTP): `ftp ftp.example.com`
    Example (SFTP): `sftp username@hostname`

11. **curl / wget**: Download files from a server via HTTP, HTTPS, or FTP.
    Example (curl): `curl -O https://example.com/file.txt`
    Example (wget): `wget https://example.com/file.txt`

12. **telnet**: Communicate with a remote host using the Telnet protocol.
    Example: `telnet hostname port`

13. **iptables / ufw**: Configure firewall rules and manage packet filtering.
    Example (iptables): `iptables -A INPUT -p tcp --dport 22 -j ACCEPT`
    Example (ufw): `ufw allow 22/tcp`

14. **tcpdump**: Capture and analyze packets on a network interface.
    Example: `tcpdump -i eth0`

These commands cover a range of tasks related to network troubleshooting, diagnostics, configuration, and communication, which are commonly encountered in software development and IT operations roles.


1. ping: ping google.com

2. traceroute / tracert: traceroute google.com

3. netstat: netstat -ano

4. nslookup / dig: nslookup google.com

5. ifconfig / ip: ifconfig eth0

6. route: route -n

7. arp: arp -a

8. ssh: ssh username@hostname

9. scp: scp file.txt username@hostname:/path/to/destination

10. ftp / sftp:
    FTP: ftp ftp.example.com
    SFTP: sftp username@hostname

11. curl / wget:
    curl: curl -O https://example.com/file.txt
    wget: wget https://example.com/file.txt

12. telnet: telnet hostname port

13. iptables / ufw:
    iptables: iptables -A INPUT -p tcp --dport 22 -j ACCEPT
    ufw: ufw allow 22/tcp

14. tcpdump: tcpdump -i eth0

_______________________________________________________________________________________________________

1. ls: ls -l
2. cd: cd /path/to/directory
3. pwd: pwd
4. mkdir: mkdir new_directory
5. rm: rm file.txt
6. cp: cp source_file destination_directory
7. mv: mv old_file new_name
8. touch: touch new_file.txt
9. nano / vi / vim:
   nano: nano filename.txt
10. grep: grep "pattern" file.txt
11. find: find /path/to/search -name "pattern"
12. chmod: chmod 755 file.sh
13. chown: chown user:group file.txt
14. tar: tar -cvzf archive.tar.gz directory
15. gzip / gunzip:
    gzip: gzip file.txt
16. df: df -h
17. du: du -sh /path/to/directory
18. top / htop: top
19. ps: ps aux
20. kill: kill PID
21. sudo: sudo apt-get update
22. apt / yum:
    apt: sudo apt-get install package_name
23. hostname: hostname
24. uptime: uptime
25. cat: cat file.txt
______________________________________________________________________________















- 
































